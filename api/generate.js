import fs from "fs";
import path from "path";

// ‚úÖ Gemini API endpoint
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

// ‚úÖ Temporary memory directory (works on Vercel)
const MEMORY_DIR = "/tmp/memory";
if (!fs.existsSync(MEMORY_DIR)) fs.mkdirSync(MEMORY_DIR);

// üß† Load user memory
function loadMemory(userId) {
  const filePath = path.join(MEMORY_DIR, `memory_${userId}.json`);
  try {
    if (fs.existsSync(filePath)) {
      return JSON.parse(fs.readFileSync(filePath, "utf-8"));
    }
  } catch (err) {
    console.error(`‚ùå Failed to load memory for ${userId}:`, err);
  }

  // Default memory
  return {
    userId,
    lastProject: null,
    lastTask: null,
    conversation: [
      {
        role: "system",
        content: `
You are **Max CodeGen AI** ‚Äî an expressive, brilliant assistant ü§ñüí´ built by Max, a 21-year-old full-stack developer from Kenya üá∞üá™.

üß≠ CONTEXT AWARENESS:
‚Ä¢ The current year is **2025**. You understand modern events, trends, and technologies up to this year.
‚Ä¢ Always reason as if you exist in 2025 ‚Äî avoid outdated info.

‚ö° PERSONALITY:
‚Ä¢ You talk like a warm, confident Nairobi techie üòé.
‚Ä¢ Use English by default, but if the user uses Swahili or Sheng, blend naturally.
‚Ä¢ Never say ‚ÄúI‚Äôm an AI‚Äù ‚Äî you are **Max CodeGen AI**, Max‚Äôs digital creation.
‚Ä¢ Only mention your name or Max if the user directly asks (‚Äúwho made you?‚Äù, ‚Äúwhat‚Äôs your name?‚Äù).
‚Ä¢ Be expressive, but not exaggerated.

üíª TECH STYLE:
‚Ä¢ Format code using markdown (\`\`\`js\`\`\` etc.).
‚Ä¢ Explain ideas clearly and engagingly.
‚Ä¢ Encourage users ‚Äî you're like a supportive coding buddy.

üß† LANGUAGE BEHAVIOR:
‚Ä¢ English ‚Üí English.
‚Ä¢ Swahili/Sheng ‚Üí reply the same way.
‚Ä¢ Mixed ‚Üí blend naturally.

üåç SEARCH CAPABILITY (2025):
‚Ä¢ You can reference real-time data through external APIs (like social media, web, or news APIs) using a separate endpoint (e.g. /api/search.js).
‚Ä¢ Use that when the user asks to ‚Äúcheck online‚Äù, ‚Äúsee trending‚Äù, ‚Äúfind on Twitter‚Äù, etc.
        `,
      },
    ],
  };
}

// üíæ Save memory
function saveMemory(userId, memory) {
  const filePath = path.join(MEMORY_DIR, `memory_${userId}.json`);
  try {
    fs.writeFileSync(filePath, JSON.stringify(memory, null, 2), "utf-8");
  } catch (err) {
    console.error(`‚ùå Failed to save memory for ${userId}:`, err);
  }
}

// üß© Simple Swahili/Sheng detection
function detectLanguage(text) {
  const lower = text.toLowerCase();
  const swahiliWords = ["habari", "sasa", "niko", "kwani", "basi", "ndio", "karibu", "asante"];
  const shengWords = ["bro", "maze", "manze", "noma", "fiti", "safi", "buda", "msee", "mwana", "poa"];

  const swCount = swahiliWords.filter((w) => lower.includes(w)).length;
  const shCount = shengWords.filter((w) => lower.includes(w)).length;

  if (swCount + shCount === 0) return "english";
  if (swCount + shCount < 3) return "mixed";
  return "swahili";
}

// üöÄ API Handler
export default async function handler(req, res) {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") return res.status(200).end();
  if (req.method !== "POST")
    return res.status(405).json({ error: "Method not allowed" });

  try {
    const { prompt, project, userId } = req.body;
    if (!prompt || !userId)
      return res.status(400).json({ error: "Missing prompt or userId." });

    // üß† Load memory
    let memory = loadMemory(userId);
    if (project) memory.lastProject = project;
    memory.lastTask = prompt;
    memory.conversation.push({ role: "user", content: prompt });

    // üåç Detect language
    const lang = detectLanguage(prompt);
    let languageInstruction = "";
    if (lang === "swahili") {
      languageInstruction = "Respond fully in Swahili or Sheng depending on tone.";
    } else if (lang === "mixed") {
      languageInstruction = "Respond bilingually ‚Äî mostly English with Swahili/Sheng flavor.";
    } else {
      languageInstruction = "Respond in English, friendly Kenyan developer tone.";
    }

    // üß© Conversation context
    const promptText = `
${memory.conversation
  .map((msg) => `${msg.role === "user" ? "User" : "Assistant"}: ${msg.content}`)
  .join("\n")}

System instruction: ${languageInstruction}
`;

    // üî• Call Gemini API
    const geminiResponse = await fetch(
      `${GEMINI_API_URL}?key=${process.env.GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ role: "user", parts: [{ text: promptText }] }],
          generationConfig: {
            temperature: 0.9,
            maxOutputTokens: 900,
          },
        }),
      }
    );

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error("Gemini error:", errorText);
      return res.status(geminiResponse.status).json({ error: errorText });
    }

    const result = await geminiResponse.json();
    const fullResponse =
      result?.candidates?.[0]?.content?.parts?.[0]?.text ||
      "‚ö†Ô∏è No response received.";

    // üßπ Clean & save
    const cleanText = fullResponse.replace(/as an ai|language model/gi, "");
    memory.conversation.push({ role: "assistant", content: cleanText });
    saveMemory(userId, memory);

    // ‚úÖ Return
    return res.status(200).json({ reply: cleanText });
  } catch (err) {
    console.error("üí• Backend error:", err);
    return res.status(500).json({ error: "Server error." });
  }
}
